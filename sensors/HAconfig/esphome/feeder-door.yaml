substitutions:
  number_of_steps: "2984"   # hand-tuned
  incr_steps: "10"          # hand-tuned
  max_speed: "400 steps/s"  # hand-tuned

esphome:
  name: feeder-door
  friendly_name: Feeder Door Controller

esp8266:
  board: esp01_1m

logger:
  level: DEBUG

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Feeder Door Controller"
    password: !secret wifi_ap_password

captive_portal:

web_server:
  port: 80

number:
  - platform: template
    name: "Door Position"
    optimistic: true
    min_value: 0
    max_value: ${number_of_steps}
    step: 1
    on_value:
      then:
        - stepper.set_target:
            id: door_stepper
            target: !lambda "return x;"

sensor:
  - platform: wifi_signal
    name: "Feeder Door WiFi Signal"
  - platform: template
    name: "Position Sensor"
    id: position

stepper:
  - platform: uln2003
    id: door_stepper
    pin_d: GPIO15  # D8
    pin_c: GPIO13  # D7
    pin_b: GPIO12  # D6
    pin_a: GPIO14  # D5
    sleep_when_done: true
    max_speed: ${max_speed}
    acceleration: inf
    deceleration: inf

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO4  # D2
      mode: INPUT_PULLUP
    name: "Door Open Sensor"
    id: open_sensor
    filters:
      - invert:

cover:
  - platform: template
    name: "Door"
    id: door
#    device_class: None
    open_action:
      - stepper.set_target:
          id: door_stepper
          target: ${number_of_steps}
      - sensor.template.publish:
          id: position
          state: !lambda return id(door_stepper).target_position;
    close_action:
      - stepper.set_target:
          id: door_stepper
          target: 0
      - sensor.template.publish:
          id: position
          state: !lambda return id(door_stepper).target_position;
    stop_action:
      - stepper.set_target:
          id: door_stepper
          target: !lambda return id(door_stepper).current_position;
      - sensor.template.publish:
          id: position
          state: !lambda return id(door_stepper).current_position;
    optimistic: True
    assumed_state: True
