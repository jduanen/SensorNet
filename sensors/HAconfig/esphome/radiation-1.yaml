esphome:
  name: radiation-1
  friendly_name: Radiation Garage

esp8266:
    board: esp01_1m

# Disable logging
logger:
  level: DEBUG  # makes uart stream available in esphome logstream
  baud_rate: 0  # disable logging over uart

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Radiation Garage"
    password: !secret wifi_ap_password

captive_portal:

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600
  debug:
    direction: RX
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          UARTDebug::log_hex(direction, bytes, ',');
          ESP_LOGD("custom", "Bytes size: %d", bytes.size());
          if (direction == UART_DIRECTION_RX) {
            int countsPerMin;
            float uSvPerHr, volts;

            // string format: "%d,%f,%f" -- Counts/Min, uSieverts/Hour, Volts
            int n = sscanf(reinterpret_cast<const char*>(bytes.data()), "%d,%f,%f", &countsPerMin, &uSvPerHr, &volts);
            if (n != 3) {
                ESP_LOGE("custom", "Failed to read from GK sensor board");
            }

            id(countsPerMin_sensor).publish_state(countsPerMin);
            id(uSvPerHr_sensor).publish_state(uSvPerHr);
            id(volts_sensor).publish_state(volts);
          }

sensor:
  - platform: wifi_signal
    name: "Radiation Garage WiFi Signal"
    update_interval: 60s
  - platform: template
    id: countsPerMin_sensor
    unit_of_measurement: "Counts/Minute"
    accuracy_decimals: 0
    state_class: "measurement"
  - platform: template
    id: uSvPerHr_sensor
    unit_of_measurement: "uSieverts/Hour"
    accuracy_decimals: 4
    state_class: "measurement"
  - platform: template
    id: volts_sensor
    unit_of_measurement: "volts"
    accuracy_decimals: 4
    state_class: "measurement"

switch:
  - platform: gpio
    name: "Reset"
    id: Reset
    pin:
      number: GPIO5  # aka D1
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: Reset
