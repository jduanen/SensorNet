substitutions:
  name_str: "Barometer DWR"
  upper_devicename: "BAROMETER_DWR"

esphome:
  name: barometer_dwr
  friendly_name: Barometer

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

logger:
  level: DEBUG

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Barometer"
    password: !secret wifi_ap_password

captive_portal:

web_server:
  port: 80

i2c:
  sda: GPIO6
  scl: GPIO7
  scan: true

sensor:
  - platform: wifi_signal   
    id: wifi_rssi           
    name: "Barometer WiFi Signal"
    update_interval: 60s
  - platform: dps310
    temperature:
      name: "Workroom Temperature"
      id: dwr_temp
      unit_of_measurement: °C
      accuracy_decimals: 2
    pressure:
      name: "Workroom Pressure"
      id: dwr_press
      unit_of_measurement: hPa
      accuracy_decimals: 3
    address: 0x77
    update_interval: 15s # 60s

text_sensor:
  - platform: homeassistant
    entity_id: ota.status
    name: "OTA Status"
  - platform: version
    id: firmware_version
    name: "Firmware Version"
  - platform: wifi_info
    ip_address:
      id: ipAddr
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:            
      id: macAddr           
      name: ESP Mac Wifi Address
    scan_results:           
      name: ESP Latest Scan Results
    dns_address:            
      name: ESP DNS Address 
                            
time:                       
  - platform: homeassistant 
    id: esptime
                         
font:                       
  - file: "gfonts://Roboto" 
    id: roboto              
    size: 12                
  - file: "gfonts://Roboto" 
    id: roboto_big          
    size: 32                
                            
display:                    
  - platform: ssd1306_i2c   
    model: "SH1106 128x64"  
    address: 0x3C           
    id: oled_display        
    update_interval: 60s    
    pages:                  
      - id: page1           
        lambda: |-
          it.printf(64, 0, id(roboto), TextAlign::TOP_CENTER, "${upper_devicename}");
          it.printf(64, 16, id(roboto), TextAlign::TOP_CENTER, "IPA: %s", id(ipAddr).state.c_str());
          it.printf(64, 32, id(roboto), TextAlign::TOP_CENTER, "RSSI: %.0f dB", id(wifi_rssi).state);
          it.printf(64, 50, id(roboto), TextAlign::TOP_CENTER, "M: %s", id(macAddr).state.c_str());
      - id: page2           
        lambda: |-
          it.printf(64, 0, id(roboto), TextAlign::TOP_CENTER, "Time");
          it.strftime(64, 16, id(roboto_big), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());
      - id: page3           
        lambda: |-
          it.printf(64, 0, id(roboto), TextAlign::TOP_CENTER, "Temperature");
          it.printf(64, 16, id(roboto_big), TextAlign::TOP_CENTER, "%.1f°C", id(dwr_temp).state);
      - id: page4           
        lambda: |-
          it.printf(64, 0, id(roboto), TextAlign::TOP_CENTER, "Pressure");
          it.printf(64, 16, id(roboto_big), TextAlign::TOP_CENTER, "%.3f", id(dwr_press).state);
          it.printf(64, 80, id(roboto), TextAlign::TOP_LEFT, " hPa");
      - id: page5           
        lambda: |-
          it.filled_rectangle(0, 0, 128, 64, COLOR_OFF);
      - id: page6           
        lambda: |-
          it.filled_rectangle(0, 0, 128, 64, COLOR_OFF);
                            
interval:                   
  - interval: 15s           
    then:                   
      - display.page.show_next: oled_display
      - component.update: oled_display

