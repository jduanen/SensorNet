esphome:
  name: weather
  friendly_name: Weather Sensors Platform

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Weather"
    password: !secret wifi_ap_password

captive_portal:

i2c:
  sda: GPIO6
  scl: GPIO7
  scan: true
  frequency: 400kHz

ads1115:
  address: 0x48

#as3935_i2c:
#  irq_pin: GPIO5
#  address: 0x03

sensor:
  - platform: wifi_signal
    name: Weather Platform WiFi Signal
    update_interval: 60s
  - platform: uptime
    name: Weather Platform Uptime
    update_interval: 60s
  - platform: aht10
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
  - platform: ads1115
    multiplexer: A0_GND
    gain: 2.048
    name: "ADC Channel 0"
    update_interval: 10s
    id: adc_0
    resolution: 16 bits
  - platform: ads1115
    multiplexer: A1_GND
    gain: 2.048
    name: "ADC Channel 1"
    update_interval: 10s
    id: adc_1
    resolution: 16 bits
  - platform: dps310
    temperature:
      name: Weather Temperature
      id: weather_temperature
    pressure:
      name: Weather Pressure
      id: weather_pressure
    address: 0x77
    update_interval: 10s


#  - platform: as3935
#    lightning_energy:
#      name: "Lightning Energy"
#    distance:
#      name: "Distance Storm"

#binary_sensor:
#  - platform: as3935
#    name: "Storm Alert"

font:
  - file: fonts/Raleway-Regular.ttf
    id: tnr1
    size: 12
  - file: fonts/Roboto-Bold.ttf
    id: tnr2
    size: 36
  - file: fonts/RobotoSlab-Regular.ttf
    id: tnr3
    size: 36

time:
  - platform: homeassistant
    id: esphome_time
    timezone: America/Los_Angeles

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    id: my_display
    address: 0x3C
    invert: true
    rotation: 0°
    pages:
      - id: page1
        lambda: |-
          if (id(weather_temperature).has_state()) {
            it.printf(64, 50, id(tnr2), TextAlign::BASELINE_CENTER, "%.1f°C", id(weather_temperature).state);
          }
      - id: page2
        lambda: |-
          if (id(weather_pressure).has_state()) {
            it.printf(6, 40, id(tnr3), TextAlign::BASELINE_LEFT, "%.0f", id(weather_pressure).state);
            it.print(6, 56, id(tnr1), TextAlign::BASELINE_LEFT, "barometric pressure");
          }
      - id: page3
        lambda: |-
          if (id(weather_temperature).has_state()) {
            it.strftime(64, 50, id(tnr3), TextAlign::BASELINE_CENTER, "%H:%M", id(esphome_time).now());
          }

interval:
    interval: 5s
    then:
      - display.page.show_next: my_display
      - component.update: my_display

#sensor:
#  - platform: pulse_counter
#    pin: 
#      number: GPIO2
#      inverted: false
#      mode:
#        input: true
#        pullup: true
#    name: "Pulse Counter"
#    unit_of_measurement: 'cpm'
#    count_mode:
#      falling_edge: INCREMENT
#      rising_edge: DISABLE
#    update_interval: 10s

## works
#sensor:
#  - platform: sen21231
#    id: person_sensor
#    update_interval: 10s


