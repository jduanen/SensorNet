esphome:
  name: ${devicename}
  friendly_name: Garage Temperature Sensor
  comment: Standalone Temperature Sensor in Middle of Garage
  platformio_options:
    board_build.flash_mode: dio
    board_build.mcu: esp32c3

substitutions:
  devicename: tempsense0
  upper_devicename: Temp Sense 0

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino
    version: latest

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "TempSense Fallback Hotspot"
    password: !secret wifi_ap_password
  power_save_mode: none

captive_portal:

# Open web port for browser access
web_server:
  port: 80

#text_sensor:
#  - platform: wifi_info
#    ip_address:
#      id: ipAddr
#      name: IP Address
#    mac_address:
#      id: macAddr
#      name: Mac Address
#    ssid:
#      name: ESP Connected SSID
#    bssid:
#      name: ESP Connected BSSID
#    scan_results:
#      name: ESP Latest Scan Results
#    dns_address:
#      name: ESP DNS Address
#  - platform: homeassistant
#    entity_id: ota.status
#    name: "OTA Status"
#  - platform: version
#    id: firmware_version
#    name: "Firmware Version"

time:
  - platform: homeassistant
    id: esptime

one_wire:
  - platform: gpio
    pin: GPIO5

sensor:
  - platform: wifi_signal
    id: wifi_rssi
    name: "Temperature WiFi Signal"
    update_interval: 60s
  - platform: dallas_temp
    address: 0x9d00000006ac7028
    state_class: "measurement"
    unit_of_measurement: "°C"
    name: "Temp Sensor"
    id: c_temp

i2c:
  sda: GPIO6
  scl: GPIO7
  scan: true

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 12
  - file: "gfonts://Roboto"
    id: roboto_big
    size: 32

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    id: oled_display
    update_interval: 60s
    pages:
      - id: page1
        lambda: |-
          it.printf(64, 0, id(roboto), TextAlign::TOP_CENTER, "${upper_devicename}");
          it.printf(64, 16, id(roboto), TextAlign::TOP_CENTER, "IPA: %s", id(ipAddr).state.c_str());
          it.printf(64, 32, id(roboto), TextAlign::TOP_CENTER, "RSSI: %.0f dB", id(wifi_rssi).state);
          it.printf(64, 50, id(roboto), TextAlign::TOP_CENTER, "M: %s", id(macAddr).state.c_str());
      - id: page2
        lambda: |-
          it.printf(64, 0, id(roboto), TextAlign::TOP_CENTER, "Time");
          it.strftime(64, 16, id(roboto_big), TextAlign::TOP_CENTER, "%H:%M", id(esptime).now());
      - id: page3
        lambda: |-
          it.printf(64, 0, id(roboto), TextAlign::TOP_CENTER, "Temperature");
          it.printf(64, 16, id(roboto_big), TextAlign::TOP_CENTER, "%.1f°C", id(c_temp).state);
      - id: page4
        lambda: |-
          it.filled_rectangle(0, 0, 128, 64, COLOR_OFF);
      - id: page5
        lambda: |-
          it.filled_rectangle(0, 0, 128, 64, COLOR_OFF);
      - id: page6
        lambda: |-
          it.filled_rectangle(0, 0, 128, 64, COLOR_OFF);

interval:
  - interval: 15s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display


#on_...:
#  then:
#    - logger.log: "hello world!!!"
